searchState.loadedDescShard("mavlink_core", 0, "The MAVLink message set.\nAttempt to read messages from both MAVLink versions\nAn async MAVLink connection\nByte buffer containing the raw representation of a MAVLink …\nByte buffer containing the raw representation of a MAVLink …\nMessage framing marker for mavlink v1\nMessage framing marker for mavlink v2\nA MAVLink connection\nEncapsulation of the Mavlink message and the header, …\nMetadata from a MAVLink packet header\nVersions of the Mavlink protocol that we support\nMAVLink Version selection when attempting to read\nConfiguration used for MAVLink 2 messages signing as …\nMAVLink 2 message signing data.\nOnly attempt to read a using a single MAVLink version.\nWether messages of any MAVLink version may be received\nWether messages of any MAVLink version may be received\nThis module implements a buffered/peekable reader using …\nConnect to a MAVLink node by address string.\nConnect asynchronously to a MAVLink node by address string.\nDeserialize MavFrame from a slice that has been received …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the frame header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module implements a buffered/peekable reader.\nGets the currently used MAVLink version\nGets the currently used MAVLink version\nRead a MAVLink message of either version 1 or 2 from a …\nAsync read a MAVLink message of either version 1 or 2 from …\nAsync read a MAVLink message of either version 1 or 2 from …\nRead a MAVLink message of either version 1 or 2 from a …\nReturn a raw buffer with the MAVLink message\nAsync read a raw buffer with the MAVLink message\nAsync read a raw buffer with the MAVLink message with …\nReturn a raw buffer with the MAVLink message with signing …\nRead a MAVLink v1 message from a Read stream.\nRead a MAVLink v1 message from a Read stream.\nReturn a raw buffer with the mavlink message V1 maximum …\nReturn a raw buffer with the mavlink message V1 maximum …\nRead a MAVLink v2  message from a Read stream.\nAsync read a MAVLink v2  message from a Read stream.\nAsync read a MAVLink v2  message from a Read stream.\nRead a MAVLink v2 message from a Read stream.\nReturn a raw buffer with the mavlink message\nAsync read a raw buffer with the mavlink message V2 …\nAsync read a raw buffer with the mavlink message with …\nReturn a raw buffer with the mavlink message with signing …\nReceive a MAVLink message.\nReceive a mavlink message.\nRead whole frame\nRead whole frame\nRead whole frame\nRead whole frame\nSend a MAVLink message\nSend a mavlink message\nSend a message with default header\nSend a message with default header\nSend a message with default header\nSend a message with default header\nWrite whole frame\nWrite whole frame\nWrite whole frame\nWrite whole frame\nSerialize <strong>Message</strong> into byte slice and return count of …\nSerialize MavFrame into a vector, so it can be sent over a …\nSet wether MAVLink messages of either version may be …\nSet wether MAVLink messages of either version may be …\nSets the MAVLink version to use for receiving (when …\nSets the MAVLink version to use for receiving (when …\nSetup secret key used for message signing, or disable …\nSetup secret key used for message signing, or disable …\nSign a MAVLink 2 message if its incompatibility flag is …\nVerify the signature of a MAVLink 2 message.\nWrite a MAVLink v1 message to a Write stream.\nAsync write a MAVLink v1 message to a Write stream.\nWrite a MAVLink v2 message to a Write stream.\nAsync write a MAVLink v2 message to a Write stream.\nWrite a MAVLink v2 message to a Write stream with signing …\nWrite a MAVLink v2 message to a Write stream with signing …\nWrite a message using the given mavlink version\nAsync write a message using the given mavlink version\nAsync write a message with signing support using the given …\nWrite a message with signing support using the given …\nA buffered/peekable reader\nConsumes a specified amount of bytes from the buffer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiates a new <code>AsyncPeekReader</code>, wrapping the provided …\nPeeks an exact amount of bytes from the internal buffer\nReads a specified amount of bytes from the internal buffer\nReads a byte from the internal buffer\nReturns a mutable reference to the underlying …\nReturns an immutable reference to the underlying …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA buffered/peekable reader\nConsumes a specified amount of bytes from the buffer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiates a new <code>PeekReader</code>, wrapping the provided …\nPeeks an exact amount of bytes from the internal buffer\nReads a specified amount of bytes from the internal buffer\nReads a byte from the internal buffer\nReturns a mutable reference to the underlying <code>std::io::Read</code>…\nReturns an immutable reference to the underlying …\nA trait very similar to <code>Default</code> but is only implemented …\nRemoves the trailing zeroes in the payload")