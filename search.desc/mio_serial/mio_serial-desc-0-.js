searchState.loadedDescShard("mio_serial", 0, "mio-serial - Serial port I/O for mio\nSpecify to clear both data received and data not yet …\nThe serial port is connected via Bluetooth\nSpecifies which buffer or buffers to purge when calling …\nNumber of bits per character\n8 bits per character\nContains the error value\nAn error type for serial port operations\nCategories of errors that can occur when interacting with …\nParity bit sets even number of 1 bits.\n5 bits per character\nFlow control modes\nFlow control using RTS/CTS signals.\nSpecify to clear data received but not read\nA parameter was incorrect.\nAn I/O error occurred.\nThe device is not available.\nNo parity bit.\nNo flow control.\nParity bit sets odd number of 1 bits.\nContains the success value\nOne stop bit.\nSpecify to clear data written but not yet transmitted\nParity checking modes\nThe serial port is connected via PCI (permanent port)\nA type for results generated by interacting with serial …\nA trait for serial port devices\nA struct containing all serial port settings\nAn extension trait for <code>SerialPortBuilder</code>\nA device-independent implementation of serial port …\nThe physical type of a <code>SerialPort</code>\nA <code>SerialStream</code>.\n7 bits per character\n6 bits per character\nFlow control using XON/XOFF bytes.\nNumber of stop bits\nTwo stop bits.\nAn unknown error occurred.\nIt can’t be determined how the serial port is connected\nThe serial port is connected via USB\nContains all possible USB information about a <code>SerialPort</code>\nReturns a list of all serial ports on system\nReturns the current baud rate.\nReturns the current baud rate.\nSet the baud rate in symbols-per-second\nGets the number of bytes available to be read from the …\nGets the number of bytes available to be read from the …\nGet the number of bytes written to the output buffer, …\nGet the number of bytes written to the output buffer, …\nDiscards all bytes from the serial driver’s input buffer …\nDiscards all bytes from the serial driver’s input buffer …\nStop transmitting a break\nStop transmitting a break\nReturns the character size.\nReturns the character size.\nSet the number of bits used to represent a character sent …\nA description of the error suitable for end-users\nSet data terminal ready (DTR) to the given state when …\nReturns the exclusivity of the port\nReturns the flow control mode.\nReturns the flow control mode.\nSet the type of signalling to use for controlling data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the corresponding <code>ErrorKind</code> for this error.\nThe kind of error this is\nManufacturer (arbitrary string)\nReturns the name of this port if it exists.\nReturn the name associated with the serial port, if known.\nConstruct a builder of <code>SerialPort</code> objects\nInstantiates a new error\nOpen a nonblocking serial port from the provided builder\nOpen a cross-platform interface to the port with the …\nOpen a platform-specific interface to the port with the …\nOpen a platform-specific interface to the port with the …\nOpen a platform-specific interface to the port with the …\nCreate a pair of pseudo serial terminals\nReturns the parity-checking mode.\nReturns the parity-checking mode.\nSet the type of parity to use for error checking\nSet the path to the serial port\nProduct ID\nThe short name of the serial port\nThe hardware device type that exposes this port\nPreserve the state of data terminal ready (DTR) when …\nProduct name (arbitrary string)\nReads the state of the Carrier Detect control signal.\nReads the state of the Carrier Detect control signal.\nReads the state of the CTS (Clear To Send) control signal.\nReads the state of the CTS (Clear To Send) control signal.\nReads the state of the Data Set Ready control signal.\nReads the state of the Data Set Ready control signal.\nReads the state of the Ring Indicator control signal.\nReads the state of the Ring Indicator control signal.\nSerial number (arbitrary string)\nSets the baud rate.\nSets the baud rate.\nStart transmitting a break\nStart transmitting a break\nSets the character size.\nSets the character size.\nSets the exclusivity of the port\nSets the flow control mode.\nSets the flow control mode.\nSets the parity-checking mode.\nSets the parity-checking mode.\nSets the number of stop bits.\nSets the number of stop bits.\nSets the timeout for future I/O operations.\nSets the timeout for future I/O operations. This parameter …\nReturns the number of stop bits.\nReturns the number of stop bits.\nSet the number of bits to use to signal the end of a …\nReturns the current timeout.\nReturns the current timeout. This parameter is const and …\nSet the amount of time to wait to receive data before …\nAttempts to clone the <code>SerialPort</code>. This allow you to write …\nCloning is not supported for <code>SerialStream</code> objects\nVendor ID\nWrites to the Data Terminal Ready pin\nWrites to the Data Terminal Ready pin\nSets the state of the RTS (Request To Send) control signal.\nSets the state of the RTS (Request To Send) control signal.")